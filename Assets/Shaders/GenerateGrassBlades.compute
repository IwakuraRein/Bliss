#pragma kernel CSMain

#include "includes/GrassRenderProperty.hlsl"
#include "includes/Terrain.hlsl"
#include "includes/FBM.hlsl"

RWStructuredBuffer<GrassRenderProperty> _Properties;
//float4x4 _ScaleMat;
//float4x4 _RotMat;
float2 _GridOrigin;
float _GridSize;
int _ChunkWidth;
int _PropertiesStartIdx;

float _TimeScale;
float _DeltaTime;
float _Time;
float _WindFieldMovingSpeed;
float _WindFieldMagnitude;
float _GrassStiffness;

float3 _Gravity;
float3 _MouseClickPos;
int _MouseClicked;
float _MouseEventDecay;
float _MouseEventRadius;
float _MouseEventWindForce;
float4 _MouseEventColor;
//float3 _ColliderPos;
//float3 _ColliderRadius;

float4x4 RotateY(float rad)
{
    float c = cos(rad);
    float s = sin(rad);

    return float4x4(
        c, 0, s, 0,
        0, 1, 0, 0,
        -s, 0, c, 0,
        0, 0, 0, 1
        );
}
float4x4 Translation(float3 translation)
{
    return float4x4 (
        1, 0, 0, translation.x,
        0, 1, 0, translation.y,
        0, 0, 1, translation.z,
        0, 0, 0, 1);
}

float3 WindField(float2 pos)
{
    pos += _Time * _WindFieldMovingSpeed;
    float3 ret;
    ret.x = perlinNoise(pos);
    ret.y = 0;
    pos.x += 1;
    pos.y = 1 - pos.y;
    ret.z = perlinNoise(pos);
    return normalize(ret) * _WindFieldMagnitude;
}

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to render populations above that, we need to be more granular with our threads.
[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _ChunkWidth * _ChunkWidth) return;
    int X = id.x % _ChunkWidth;
    int Y = id.x / _ChunkWidth;

    GrassRenderProperty prop = _Properties[id.x + _PropertiesStartIdx];
    float3 v2_local = prop.v1andv2_local.yzw;
    v2_local.y *= _GrassHeight;
    v2_local.xz *= _GrassWidth;

    // compute v0
    float dx = _terrainHash(float(id.x)) * 2.0 - 1.0;
    float dy = _terrainHash(dx) * 2.0 - 1.0;
    dx += X; dy += Y;
    float2 pos2d = float2(_GridOrigin.x + _GridSize * dx, _GridOrigin.y + _GridSize * dy);

    // compute right dir
    float4x4 rotMat = RotateY(_terrainHash(dy) * 6.28318531);
    float4 right = mul(rotMat, float4(1, 0, 0, 0));
    right.xyz = normalize(right.xyz);

    // handle mouse event
    if (_MouseClicked != 0)
    {
        float3 dir = prop.v0_world - _MouseClickPos;
        float dist = length(prop.v0_world - _MouseClickPos);
        dir = normalize(dir);
        float ratio = saturate(1.0 - dist / _MouseEventRadius);
        prop.innerForce.xyz = _MouseEventWindForce * dir * ratio * ratio;

        if (ratio > 0.001)
        {
            float colorMix = ratio / (ratio + prop.color.w);
            prop.color.xyz = lerp(prop.color.xyz, _MouseEventColor, colorMix);
            //prop.color.w = max(prop.color.w, ratio);
            prop.color.w = ratio;
        }
    }
    //else
    //{
    //    float decay = pow(_MouseEventDecay, _DeltaTime / _TimeScale);
    //    prop.innerForce *= decay;
    //    prop.color.w *= decay;
    //}

    // update v2 and v1
    float3 v2_local_orig = float3(0, _GrassHeight, 0);
    float3 force = (v2_local_orig - v2_local) * _GrassStiffness; // recovery;
    force += WindField(pos2d); // wind
    force += _Gravity; // gravity
    force += prop.innerForce;
    force *= _DeltaTime * _TimeScale;
    v2_local += force ;
    if (v2_local.y < 0) v2_local -= force; // make sure grass is above ground

    float3 v0_local = float3(0, 0, 0);
    float lproj = length(v2_local.xz);
    float3 v1_local = float3(v0_local.x, _GrassHeight * max(1 - lproj / _GrassHeight, 0.05 * max(lproj / _GrassHeight, 1)), v0_local.z);
    float l0 = length(v0_local - v2_local);
    float l1 = length(v0_local - v1_local) + length(v2_local - v1_local);
    float l = (2 * l0 + l1) * 0.33333333333;
    float r = _GrassHeight / l;
    float3 v1new = v0_local + r * (v1_local - v0_local);
    float3 v2new = v1new + r * (v2_local - v1_local);


    // write the result
        float decay = pow(_MouseEventDecay, _DeltaTime / _TimeScale);
        prop.innerForce *= decay;
        prop.color.w *= decay;
    prop.v0_world = float4(pos2d.x, GetHeight(pos2d)+0.05, pos2d.y, 1);
    prop.v1andv2_local.x = v1new.y / _GrassHeight;
    prop.v1andv2_local.z = v2new.y / _GrassHeight;
    prop.v1andv2_local.yw = v2new.xz / _GrassWidth;
    prop.right = right;


    _Properties[id.x + _PropertiesStartIdx] = prop;
}